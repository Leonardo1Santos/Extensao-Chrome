name: CI - Containerização + E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Instalar Playwright
        run: npx playwright install --with-deps chromium

      - name: Criar script de build (se não existir)
        run: |
          mkdir -p scripts
          if [ ! -f "scripts/build-extension.mjs" ]; then
            cat > scripts/build-extension.mjs << 'EOF'
          import fs from 'node:fs';
          import path from 'node:path';
          import archiver from 'archiver';

          const dist = 'dist';
          // Limpa diretório dist
          fs.rmSync(dist, { recursive: true, force: true });
          fs.mkdirSync(dist);

          // Copia arquivos essenciais
          const filesToCopy = ['manifest.json', 'package.json', 'playwright.config.ts'];
          const dirsToCopy = ['src', 'icons', 'tests'];

          filesToCopy.forEach(file => {
            if (fs.existsSync(file)) {
              fs.copyFileSync(file, path.join(dist, file));
            }
          });

          dirsToCopy.forEach(dir => {
            if (fs.existsSync(dir)) {
              fs.cpSync(dir, path.join(dist, dir), { recursive: true });
            }
          });

          // Gera ZIP
          const output = fs.createWriteStream(path.join(dist, 'extension.zip'));
          const archive = archiver('zip', { zlib: { level: 9 } });
          
          archive.on('error', (err) => {
            throw err;
          });
          
          archive.pipe(output);
          archive.directory(dist, false);
          await archive.finalize();
          console.log('✅ Build gerado em dist/ e dist/extension.zip');
          EOF
          fi

      - name: Instalar archiver (necessário para o build)
        run: npm install archiver

      - name: Build da extensão
        run: node scripts/build-extension.mjs

      - name: Verificar build
        run: |
          echo "📦 Conteúdo do diretório dist:"
          ls -lah dist/
          echo ""
          echo "📄 Conteúdo do ZIP:"
          unzip -l dist/extension.zip | head -20

      - name: Executar testes E2E
        run: npx playwright test --reporter=html,list
        continue-on-error: false

      - name: Publicar relatório do Playwright
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Publicar pacote da extensão
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: extension-zip
          path: dist/extension.zip
          retention-days: 30

      - name: Gerar resumo de testes
        if: always()
        run: |
          echo "## 📊 Resumo do Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build executado em: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "📦 Extensão empacotada: \`extension.zip\`" >> $GITHUB_STEP_SUMMARY
          if [ -f playwright-report/index.html ]; then
            echo "📈 Relatório de testes disponível nos Artifacts" >> $GITHUB_STEP_SUMMARY
          fi

  # Job opcional para build da imagem Docker
  docker-build:
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Verificar se Dockerfile existe
        run: |
          if [ ! -f "Dockerfile" ]; then
            echo "⚠️  Dockerfile não encontrado. Criando Dockerfile básico..."
            cat > Dockerfile << 'EOF'
          FROM mcr.microsoft.com/playwright:v1.46.0-jammy
          WORKDIR /app
          COPY . .
          RUN npm ci
          RUN npx playwright install --with-deps chromium
          CMD ["npx", "playwright", "test", "--reporter=html,list"]
          EOF
          fi

      - name: Build da imagem Docker
        run: |
          docker build -t chrome-extension-test .
          echo "✅ Imagem Docker construída com sucesso"